using System;
using System.Collections.Generic;
using Template.DOM.Errors;
using Template.RestAPI.Errors;

namespace Template.RestAPI.Models
{
    public partial class InlineResponse400Errors
    {
        #region Constructors

        public InlineResponse400Errors(){}
#nullable enable
        /// <summary>
        /// Constructor for initializing a complete 400 error
        /// </summary>
        /// <param name="type">type refers to the specific problem type with human-readeable documentation</param>
        /// <param name="status">The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
        /// occurrence of the problem.</param>
        /// <param name="errorCode">String error code that acts as key.</param>
        /// <param name="title">A short, human-readable summary of the problem type.</param>
        /// <param name="detail">A human-readable explanation specific to this occurrence of the problem.</param>
        /// <param name="instance">A URI reference that identifies the specific occurrence of the problem.It may or
        /// may not yield further information if dereferenced.</param>
        public InlineResponse400Errors(
#nullable enable
            string? type,
            int status,
            string errorCode,
            string title,
            string detail,
            string? instance
#nullable disable
            )
        {
            // Set the private members
            if (type is null)
            {
                Type = "https://tools.ietf.org/html/rfc7231#section-6.5.4";
            }
            else
            {
                Type = type;
            }
            Status = status;
            ErrorCode = errorCode;
            Title = title;
            Detail = detail;
            Instance = instance ?? "DEFAULT";
            // Set the extra attributes to null since there is no information
            ExtraAttributes = null;
        }
        /// <summary>
        /// Constructor for initializing a complete 400 error with extra attributes
        /// </summary>
        /// <param name="type">type refers to the specific problem type with human-readeable documentation</param>
        /// <param name="status">The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
        /// occurrence of the problem.</param>
        /// <param name="errorCode">String error code that acts as key.</param>
        /// <param name="title">A short, human-readable summary of the problem type.</param>
        /// <param name="detail">A human-readable explanation specific to this occurrence of the problem.</param>
        /// <param name="instance">A URI reference that identifies the specific occurrence of the problem.It may or
        /// may not yield further information if dereferenced.</param>
        /// <param name="extraAttributes">Extra attributes to enrich the error</param>
        public InlineResponse400Errors(
#nullable enable
            string? type,
            int status,
            string errorCode,
            string title,
            string detail,
            string? instance,
            global::Template.RestAPI.Models.InlineResponse400ExtraAttributes extraAttributes
#nullable disable
            )
        {
            // Set the private members
            if (type is null)
            {
                Type = "https://tools.ietf.org/html/rfc7231#section-6.5.4";
            }
            else
            {
                Type = type;
            }
            Status = status;
            ErrorCode = errorCode;
            Title = title;
            Detail = detail;
            Instance = instance ?? "DEFAULT";
            // Set the extra attributes to null since there is no information
            ExtraAttributes = extraAttributes;
        }
        /// <summary>
        /// Constructor using an EMGeneralException as base data provider
        /// </summary>
        /// <param name="type">type refers to the specific problem type with human-readeable documentation</param>
        /// <param name="status">The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
        /// occurrence of the problem.</param>
        /// <param name="exception">Original exception from where to take the data</param>
        public InlineResponse400Errors(
#nullable enable
            string? type,
#nullable disable
            int status,
            EMGeneralException exception) :
            this(type, status, exception.Code, exception.Title, exception.Description, exception.ServiceInstance)
        {
            // Instantiate the ExtraAttributes
            global::Template.RestAPI.Models.InlineResponse400ExtraAttributes extraAttributes = new(
                descriptionDynamicContents: exception.DescriptionDynamicContents,
                module: exception.Module,
                serviceName: exception.ServiceName,
                serviceLocation: exception.ServiceLocation);
            // Set the property
            ExtraAttributes = extraAttributes;
        }
        /// <summary>
        /// Constructor using a RestAPIError
        /// </summary>
        /// <param name="restAPIError">Instance of a RestAPIError</param>
        public InlineResponse400Errors(IRestAPIError restAPIError)
        {
            // Set the properties with the RestAPIError data
            Type = restAPIError.Type;
            Status = restAPIError.Status;
            ErrorCode = restAPIError.ErrorCode;
            Title = restAPIError.Title;
            Instance = restAPIError.Instance;           
            // Set the Detail and ExtraAttribures based on the type of RestAPIError
            if (restAPIError is RestAPIError error)
            {
                // Set the Detail with the dynamic contents
                Detail = restAPIError.Detail(
                    args: error
                        .ExtraAttributes.DescriptionDynamicContents
                        .ToArray());
                // Set the extra attributes
                ExtraAttributes = new(
                    descriptionDynamicContents: error
                        .ExtraAttributes
                        .DescriptionDynamicContents,
                    module: error.ExtraAttributes.Module,
                    serviceName: error.ExtraAttributes.ServiceName,
                    serviceLocation: error.ExtraAttributes.ServiceLocation);
            }
            else
                // Set the Detail using null as the argument since the detail has no dynamic content
                Detail = restAPIError.Detail(args: null);
        }
        #endregion

        #region Factories
        /// <summary>
        /// Factory to create a list of errors based on a list of EMGeneralExceptions
        /// </summary>
        /// <param name="exceptions">List of EMGeneralExceptions</param>
        /// <returns></returns>
        public static List<InlineResponse400Errors> CreateFromExceptionList(
            List<EMGeneralException> exceptions)
        {
            // Create an empty list to hold the new errors
            List<InlineResponse400Errors> newErrors = [];
            // Iterate the provided list of exceptions to process them
            foreach (var exception in exceptions)
            {
                // Catch any error creating the new errors
                try
                {
                    // Instantiate the error and add it to the list
                    newErrors.Add(new InlineResponse400Errors(
                        type: null,
                        status: 400,
                        exception: exception));
                }
                catch (Exception exc)
                {
                    // Instantiate the error for creating the error
                    newErrors.Add(new InlineResponse400Errors(
                        type: null,
                        status: 400,
                        errorCode: "EM-GENERAL-ERROR-PROBLEM-PROCESSING-ERROR",
                        title: "Error trying to process an error",
                        detail: exc.Message,
                        instance: "DEFAULT"));
                }
            }
            // Return the list of errors
            return newErrors;
        }
        /// <summary>
        /// Factory to create a list of errors based on a AggregatedExceptions
        /// </summary>
        /// <param name="aggregateException">Aggregated exceptions containing at least
        /// one inner EMGeneralException</param>
        /// <returns></returns>
        public static List<InlineResponse400Errors> CreateFromAggregatedException(
            EMGeneralAggregateException aggregateException)
        {
            // Initialize the list of exceptions
            List<EMGeneralException> emGeneralExceptions = [];
            // Extract each inner exception
            foreach (var exception in aggregateException.InnerExceptions)
            {
                // Add the cast exception into the list
                emGeneralExceptions.Add((EMGeneralException)exception);
            }
            // Use the basic factory passing the list of EMGeneralExceptions within the AggregatedException
            return CreateFromExceptionList(exceptions: emGeneralExceptions);
        }
        /// <summary>
        /// Creates a list of InlineResponse400Errors based on a list of RestAPIErrors
        /// </summary>
        /// <param name="restAPIErrors">List of RestAPIErrors</param>
        /// <returns>List of InlineResponse400Errors</returns>
        public static List<InlineResponse400Errors> CreateFromRestAPIErrors(
            List<IRestAPIError> restAPIErrors)
        {
            // Create an empty list to hold the new errors
            List<InlineResponse400Errors> newErrors = [];
            // Iterate the list of RestAPIErrors
            foreach (var restAPIError in restAPIErrors)
                // Add the new instance of InlineResponse400Errors to the list
                newErrors.Add(new InlineResponse400Errors(restAPIError: restAPIError));
            // Return the list
            return newErrors;
        }
        #endregion
    }
}
