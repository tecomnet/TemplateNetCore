using System.Collections.Generic;
using Template.DOM.Errors;
using Template.RestAPI.Errors;

namespace Template.RestAPI.Models
{
    public partial class InlineResponse400
    {
        #region Constructors
        /// <summary>
        /// Base constructor the instantiates with an empty list of errors
        /// </summary>
        public InlineResponse400()
        {
            // Initialize the Errors property with an empty list for 400Errors
            Errors = new List<InlineResponse400Errors>();
        }
        /// <summary>
        /// Constructor adding a provided error
        /// </summary>
        /// <param name="error">Instance of the InlineResponse400Erros with an error</param>
        public InlineResponse400(InlineResponse400Errors error)
        {
            // Initialize the Errors property with an empty list for 400Errors
            Errors = new List<InlineResponse400Errors>
            {
                // Add the provided error
                error
            };
        }
        /// <summary>
        /// Constructor adding a provided RestAPIError
        /// </summary>
        /// <param name="restAPIError">Instance of the RestAPIError with an error</param>
        public InlineResponse400(IRestAPIError restAPIError)
        {
            // Initialize the Errors property with an empty list for 400Errors
            Errors = new List<InlineResponse400Errors>
            {
                // Add the provided error
                new InlineResponse400Errors(restAPIError: restAPIError)
            };
        }
        /// <summary>
        /// Constructor using a list of errors
        /// </summary>
        /// <param name="errors">List of 400 like errors</param>
        public InlineResponse400(List<InlineResponse400Errors> errors)
        {
            // Initialize the Errors property with the provided list of errors
            Errors = errors;
        }
        /// <summary>
        /// Constructor based on a single exception
        /// </summary>
        /// <param name="type">type refers to the specific problem type with human-readeable documentation</param>
        /// <param name="status">The HTTP status code ([RFC7231], Section 6) generated by the origin server for this
        /// occurrence of the problem.</param>
        /// <param name="exception">Instance on an EMGeneralException</param>
        public InlineResponse400(
#nullable enable
            string? type,
#nullable disable
            int status,
            EMGeneralException exception)
        {
            // Initialize the Errors property with an empty list for 400Errors
            Errors = new List<InlineResponse400Errors>();
            // Create an error instance
            InlineResponse400Errors error = new(
                type: type,
                status: status,
                exception: exception);
            // Add the error the the list
            Errors.Add(error);
        }
        /// <summary>
        /// Constrtuctor based on a list of exceptions
        /// </summary>
        /// <param name="exceptions">List of EMGeneralExceptions</param>
        public InlineResponse400(List<EMGeneralException> exceptions)
        {
            // Initialize the Errors property with a list of errors from the exception factory
            Errors = InlineResponse400Errors.CreateFromExceptionList(exceptions: exceptions);
        }
        /// <summary>
        /// Constrtuctor based on a list of RestAPIErrors
        /// </summary>
        /// <param name="restAPIErrors">List of RestAPIErrors</param>
        public InlineResponse400(List<IRestAPIError> restAPIErrors)
        {
            // Initialize the Errors property with a list of errors from the exception factory
            Errors = InlineResponse400Errors.CreateFromRestAPIErrors(restAPIErrors: restAPIErrors);
        }
        /// <summary>
        /// Constructor based on a AggregatedException containing at least one EMGeneralException
        /// </summary>
        /// <param name="aggregateException">Aggregated exception containing at least one EMGeneralException</param>
        public InlineResponse400(EMGeneralAggregateException aggregateException)
        {
            // Initialize the Errors property with a list of errors from the aggregated exception factory
            Errors = InlineResponse400Errors.CreateFromAggregatedException(aggregateException: aggregateException);
        }
        #endregion

        #region List error management methods
        /// <summary>
        /// Adds an error to the local list of errors
        /// </summary>
        /// <param name="error">Instance of the InlineResponse400Erros with an error</param>
        public void AddError(InlineResponse400Errors error)
        {
            // Add the provided error to the list
            Errors.Add(error);
        }
        /// <summary>
        /// Empties the list of errors
        /// </summary>
        public void EmptyErrors()
        {
            // Empties the list of errors by re-initialiazing the list
            Errors = new List<InlineResponse400Errors>();
        }
        #endregion
    }
}
