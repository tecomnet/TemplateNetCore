/*
 * User API
 *
 * Api para exponer la funcionalidad de usuarios. 
 *
 * OpenAPI spec version: 0.1.0
 * Contact: edilberto_diaz14@hotmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace Template.RestAPI.Models
{
    /// <summary>
    /// Extra attributes
    /// </summary>
    [DataContract]
    public partial class InlineResponse400ExtraAttributes : IEquatable<InlineResponse400ExtraAttributes>
    { 
        /// <summary>
        /// List of dynamic fields used in the detail of the error
        /// </summary>
        /// <value>List of dynamic fields used in the detail of the error</value>

        [DataMember(Name="desciptionDynamicContents")]
        public List<string> DesciptionDynamicContents { get; set; }

        /// <summary>
        /// Module that generated the error
        /// </summary>
        /// <value>Module that generated the error</value>

        [DataMember(Name="module")]
        public string Module { get; set; }

        /// <summary>
        /// Name of the service generating the error
        /// </summary>
        /// <value>Name of the service generating the error</value>

        [DataMember(Name="serviceName")]
        public string ServiceName { get; set; }

        /// <summary>
        /// Location of the service&#x27;s instance
        /// </summary>
        /// <value>Location of the service&#x27;s instance</value>

        [DataMember(Name="serviceLocation")]
        public string ServiceLocation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse400ExtraAttributes {\n");
            sb.Append("  DesciptionDynamicContents: ").Append(DesciptionDynamicContents).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  ServiceLocation: ").Append(ServiceLocation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse400ExtraAttributes)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse400ExtraAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse400ExtraAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse400ExtraAttributes other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DesciptionDynamicContents == other.DesciptionDynamicContents ||
                    DesciptionDynamicContents != null &&
                    DesciptionDynamicContents.SequenceEqual(other.DesciptionDynamicContents)
                ) && 
                (
                    Module == other.Module ||
                    Module != null &&
                    Module.Equals(other.Module)
                ) && 
                (
                    ServiceName == other.ServiceName ||
                    ServiceName != null &&
                    ServiceName.Equals(other.ServiceName)
                ) && 
                (
                    ServiceLocation == other.ServiceLocation ||
                    ServiceLocation != null &&
                    ServiceLocation.Equals(other.ServiceLocation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DesciptionDynamicContents != null)
                    hashCode = hashCode * 59 + DesciptionDynamicContents.GetHashCode();
                    if (Module != null)
                    hashCode = hashCode * 59 + Module.GetHashCode();
                    if (ServiceName != null)
                    hashCode = hashCode * 59 + ServiceName.GetHashCode();
                    if (ServiceLocation != null)
                    hashCode = hashCode * 59 + ServiceLocation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse400ExtraAttributes left, InlineResponse400ExtraAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse400ExtraAttributes left, InlineResponse400ExtraAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
